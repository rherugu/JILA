{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar reconciler = require('./reconciler.js');\nvar context = require('./context.js');\nvar jsxRuntime = require('react/jsx-runtime');\nconst cache = new WeakMap(); // @see https://github.com/facebook/react/blob/993ca533b42756811731f6b7791ae06a35ee6b4d/packages/react-reconciler/src/ReactRootTags.js\n// I think we are a legacy root?\n\nconst LEGACY_ROOT = 0;\nconst defaultReconciler = reconciler.createReconciler();\nfunction render(element, root, callback, reconciler = defaultReconciler) {\n  // First, check if we've already cached a container and render context for this root\n  let cached = cache.get(root);\n  if (!cached) {\n    // Since we haven't created a container for this root yet, create a new one\n    const value = {\n      container: reconciler.createContainer(root, LEGACY_ROOT, false, null),\n      // We also cache the render context to avoid re-creating it on subsequent render calls\n      renderContext: {\n        root,\n        reconciler\n      }\n    }; // Store the container and render context for retrieval on subsequent render calls\n\n    cache.set(root, value);\n    cached = value;\n  }\n  const {\n    container,\n    renderContext\n  } = cached; // callback is cast here because the typings do not mark that argument\n  // as optional, even though it is.\n\n  reconciler.updateContainer( /*#__PURE__*/jsxRuntime.jsx(context.RenderContext.Provider, {\n    value: renderContext,\n    children: element\n  }), container, null, callback); // Did not work for me because (I think?) it is done by the worker\n  // and therefore has an entirely different React.\n  //\n  // Original code was from:\n  // @see https://github.com/facebook/react/issues/16666\n  // @see https://github.com/michalochman/react-pixi-fiber/pull/148\n  //\n  // reconciler.injectIntoDevTools({\n  //   bundleType: 1,\n  //   findFiberByHostInstance: reconciler.findFiberByHostInstance,\n  //   rendererPackageName: '@remote-ui/react',\n  //   version: '16.9.0',\n  // });\n}\n\nexports.render = render;","map":{"version":3,"names":["Object","defineProperty","exports","value","reconciler","require","context","jsxRuntime","cache","WeakMap","LEGACY_ROOT","defaultReconciler","createReconciler","render","element","root","callback","cached","get","container","createContainer","renderContext","set","updateContainer","jsx","RenderContext","Provider","children"],"sources":["/Users/raghavvherugu/Desktop/Projects/name/Jila/node_modules/@remote-ui/react/build/cjs/render.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar reconciler = require('./reconciler.js');\nvar context = require('./context.js');\nvar jsxRuntime = require('react/jsx-runtime');\n\nconst cache = new WeakMap(); // @see https://github.com/facebook/react/blob/993ca533b42756811731f6b7791ae06a35ee6b4d/packages/react-reconciler/src/ReactRootTags.js\n// I think we are a legacy root?\n\nconst LEGACY_ROOT = 0;\nconst defaultReconciler = reconciler.createReconciler();\nfunction render(element, root, callback, reconciler = defaultReconciler) {\n  // First, check if we've already cached a container and render context for this root\n  let cached = cache.get(root);\n\n  if (!cached) {\n    // Since we haven't created a container for this root yet, create a new one\n    const value = {\n      container: reconciler.createContainer(root, LEGACY_ROOT, false, null),\n      // We also cache the render context to avoid re-creating it on subsequent render calls\n      renderContext: {\n        root,\n        reconciler\n      }\n    }; // Store the container and render context for retrieval on subsequent render calls\n\n    cache.set(root, value);\n    cached = value;\n  }\n\n  const {\n    container,\n    renderContext\n  } = cached; // callback is cast here because the typings do not mark that argument\n  // as optional, even though it is.\n\n  reconciler.updateContainer( /*#__PURE__*/jsxRuntime.jsx(context.RenderContext.Provider, {\n    value: renderContext,\n    children: element\n  }), container, null, callback); // Did not work for me because (I think?) it is done by the worker\n  // and therefore has an entirely different React.\n  //\n  // Original code was from:\n  // @see https://github.com/facebook/react/issues/16666\n  // @see https://github.com/michalochman/react-pixi-fiber/pull/148\n  //\n  // reconciler.injectIntoDevTools({\n  //   bundleType: 1,\n  //   findFiberByHostInstance: reconciler.findFiberByHostInstance,\n  //   rendererPackageName: '@remote-ui/react',\n  //   version: '16.9.0',\n  // });\n}\n\nexports.render = render;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,UAAU,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC;AACrC,IAAIE,UAAU,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAE7C,MAAMG,KAAK,GAAG,IAAIC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC7B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACrB,MAAMC,iBAAiB,GAAGP,UAAU,CAACQ,gBAAgB,CAAC,CAAC;AACvD,SAASC,MAAMA,CAACC,OAAO,EAAEC,IAAI,EAAEC,QAAQ,EAAEZ,UAAU,GAAGO,iBAAiB,EAAE;EACvE;EACA,IAAIM,MAAM,GAAGT,KAAK,CAACU,GAAG,CAACH,IAAI,CAAC;EAE5B,IAAI,CAACE,MAAM,EAAE;IACX;IACA,MAAMd,KAAK,GAAG;MACZgB,SAAS,EAAEf,UAAU,CAACgB,eAAe,CAACL,IAAI,EAAEL,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC;MACrE;MACAW,aAAa,EAAE;QACbN,IAAI;QACJX;MACF;IACF,CAAC,CAAC,CAAC;;IAEHI,KAAK,CAACc,GAAG,CAACP,IAAI,EAAEZ,KAAK,CAAC;IACtBc,MAAM,GAAGd,KAAK;EAChB;EAEA,MAAM;IACJgB,SAAS;IACTE;EACF,CAAC,GAAGJ,MAAM,CAAC,CAAC;EACZ;;EAEAb,UAAU,CAACmB,eAAe,EAAE,aAAahB,UAAU,CAACiB,GAAG,CAAClB,OAAO,CAACmB,aAAa,CAACC,QAAQ,EAAE;IACtFvB,KAAK,EAAEkB,aAAa;IACpBM,QAAQ,EAAEb;EACZ,CAAC,CAAC,EAAEK,SAAS,EAAE,IAAI,EAAEH,QAAQ,CAAC,CAAC,CAAC;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;;AAEAd,OAAO,CAACW,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}