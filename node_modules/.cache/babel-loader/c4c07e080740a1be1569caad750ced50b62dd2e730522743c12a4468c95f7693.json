{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar reactReconciler = require('react-reconciler');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar reactReconciler__default = /*#__PURE__*/_interopDefaultLegacy(reactReconciler);\nconst createReconciler = options => {\n  var _options$primary;\n  return reactReconciler__default[\"default\"]({\n    now: Date.now,\n    // Timeout\n    scheduleTimeout: setTimeout,\n    cancelTimeout: clearTimeout,\n    noTimeout: false,\n    // @see https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMHostConfig.js#L408\n    queueMicrotask: callback => Promise.resolve(null).then(callback).catch(handleErrorInNextTick),\n    isPrimaryRenderer: (_options$primary = options === null || options === void 0 ? void 0 : options.primary) !== null && _options$primary !== void 0 ? _options$primary : true,\n    supportsMutation: true,\n    supportsHydration: false,\n    supportsPersistence: false,\n    // Context\n    getRootHostContext() {\n      return {};\n    },\n    getChildHostContext(context) {\n      return context;\n    },\n    // Instances\n    createTextInstance(text, root) {\n      return root.createText(text);\n    },\n    createInstance(type, allProps, root) {\n      const {\n        children: _children,\n        ...props\n      } = allProps;\n      return root.createComponent(type, props);\n    },\n    // Updates\n    commitTextUpdate(text, _oldText, newText) {\n      text.update(newText);\n    },\n    prepareUpdate(_instance, _type, oldProps, newProps) {\n      const updateProps = {};\n      let needsUpdate = false;\n      for (const key in oldProps) {\n        if (!has(oldProps, key) || key === 'children') {\n          continue;\n        }\n        if (!(key in newProps)) {\n          needsUpdate = true;\n          updateProps[key] = undefined; // } else if (typeof oldProps[key] === 'function') {\n          //   if (typeof newProps[key] === 'function') {\n          //     fragment.controller.functions.exchange(\n          //       oldProps[key] as Function,\n          //       newProps[key] as Function,\n          //     );\n          //   } else {\n          //     needsUpdate = true;\n          //     fragment.controller.functions.revoke(oldProps[key] as Function);\n          //     updateProps[key] = newProps[key];\n          //   }\n        } else if (oldProps[key] !== newProps[key]) {\n          needsUpdate = true;\n          updateProps[key] = newProps[key];\n        }\n      }\n      for (const key in newProps) {\n        if (!has(newProps, key) || key === 'children') {\n          continue;\n        }\n        if (!(key in oldProps)) {\n          needsUpdate = true;\n          updateProps[key] = newProps[key];\n        }\n      }\n      return needsUpdate ? updateProps : null;\n    },\n    commitUpdate(instance, payload) {\n      instance.updateProps(payload);\n    },\n    // Update root\n    appendChildToContainer(remoteRoot, child) {\n      remoteRoot.append(child);\n    },\n    insertInContainerBefore(remoteRoot, child, beforeChild) {\n      remoteRoot.insertBefore(child, beforeChild);\n    },\n    removeChildFromContainer(remoteRoot, child) {\n      remoteRoot.removeChild(child);\n    },\n    clearContainer(remoteRoot) {\n      for (const child of remoteRoot.children) {\n        remoteRoot.removeChild(child);\n      }\n    },\n    // Update children\n    appendInitialChild(parent, child) {\n      parent.append(child);\n    },\n    appendChild(parent, child) {\n      parent.append(child);\n    },\n    insertBefore(parent, newChild, beforeChild) {\n      parent.insertBefore(newChild, beforeChild);\n    },\n    removeChild(parent, child) {\n      parent.removeChild(child);\n    },\n    // Unknown\n    finalizeInitialChildren() {\n      return false;\n    },\n    shouldSetTextContent() {\n      return false;\n    },\n    getPublicInstance() {},\n    prepareForCommit() {\n      return null;\n    },\n    resetAfterCommit() {},\n    commitMount() {},\n    preparePortalMount() {}\n  });\n};\nfunction handleErrorInNextTick(error) {\n  setTimeout(() => {\n    throw error;\n  });\n}\nconst {\n  hasOwnProperty\n} = {};\nfunction has(object, property) {\n  return hasOwnProperty.call(object, property);\n}\nexports.createReconciler = createReconciler;","map":{"version":3,"names":["Object","defineProperty","exports","value","reactReconciler","require","_interopDefaultLegacy","e","reactReconciler__default","createReconciler","options","_options$primary","now","Date","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","queueMicrotask","callback","Promise","resolve","then","catch","handleErrorInNextTick","isPrimaryRenderer","primary","supportsMutation","supportsHydration","supportsPersistence","getRootHostContext","getChildHostContext","context","createTextInstance","text","root","createText","createInstance","type","allProps","children","_children","props","createComponent","commitTextUpdate","_oldText","newText","update","prepareUpdate","_instance","_type","oldProps","newProps","updateProps","needsUpdate","key","has","undefined","commitUpdate","instance","payload","appendChildToContainer","remoteRoot","child","append","insertInContainerBefore","beforeChild","insertBefore","removeChildFromContainer","removeChild","clearContainer","appendInitialChild","parent","appendChild","newChild","finalizeInitialChildren","shouldSetTextContent","getPublicInstance","prepareForCommit","resetAfterCommit","commitMount","preparePortalMount","error","hasOwnProperty","object","property","call"],"sources":["/Users/raghavvherugu/Desktop/Projects/name/Jila/node_modules/@remote-ui/react/build/cjs/reconciler.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar reactReconciler = require('react-reconciler');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar reactReconciler__default = /*#__PURE__*/_interopDefaultLegacy(reactReconciler);\n\nconst createReconciler = options => {\n  var _options$primary;\n\n  return reactReconciler__default[\"default\"]({\n    now: Date.now,\n    // Timeout\n    scheduleTimeout: setTimeout,\n    cancelTimeout: clearTimeout,\n    noTimeout: false,\n    // @see https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMHostConfig.js#L408\n    queueMicrotask: callback => Promise.resolve(null).then(callback).catch(handleErrorInNextTick),\n    isPrimaryRenderer: (_options$primary = options === null || options === void 0 ? void 0 : options.primary) !== null && _options$primary !== void 0 ? _options$primary : true,\n    supportsMutation: true,\n    supportsHydration: false,\n    supportsPersistence: false,\n\n    // Context\n    getRootHostContext() {\n      return {};\n    },\n\n    getChildHostContext(context) {\n      return context;\n    },\n\n    // Instances\n    createTextInstance(text, root) {\n      return root.createText(text);\n    },\n\n    createInstance(type, allProps, root) {\n      const {\n        children: _children,\n        ...props\n      } = allProps;\n      return root.createComponent(type, props);\n    },\n\n    // Updates\n    commitTextUpdate(text, _oldText, newText) {\n      text.update(newText);\n    },\n\n    prepareUpdate(_instance, _type, oldProps, newProps) {\n      const updateProps = {};\n      let needsUpdate = false;\n\n      for (const key in oldProps) {\n        if (!has(oldProps, key) || key === 'children') {\n          continue;\n        }\n\n        if (!(key in newProps)) {\n          needsUpdate = true;\n          updateProps[key] = undefined; // } else if (typeof oldProps[key] === 'function') {\n          //   if (typeof newProps[key] === 'function') {\n          //     fragment.controller.functions.exchange(\n          //       oldProps[key] as Function,\n          //       newProps[key] as Function,\n          //     );\n          //   } else {\n          //     needsUpdate = true;\n          //     fragment.controller.functions.revoke(oldProps[key] as Function);\n          //     updateProps[key] = newProps[key];\n          //   }\n        } else if (oldProps[key] !== newProps[key]) {\n          needsUpdate = true;\n          updateProps[key] = newProps[key];\n        }\n      }\n\n      for (const key in newProps) {\n        if (!has(newProps, key) || key === 'children') {\n          continue;\n        }\n\n        if (!(key in oldProps)) {\n          needsUpdate = true;\n          updateProps[key] = newProps[key];\n        }\n      }\n\n      return needsUpdate ? updateProps : null;\n    },\n\n    commitUpdate(instance, payload) {\n      instance.updateProps(payload);\n    },\n\n    // Update root\n    appendChildToContainer(remoteRoot, child) {\n      remoteRoot.append(child);\n    },\n\n    insertInContainerBefore(remoteRoot, child, beforeChild) {\n      remoteRoot.insertBefore(child, beforeChild);\n    },\n\n    removeChildFromContainer(remoteRoot, child) {\n      remoteRoot.removeChild(child);\n    },\n\n    clearContainer(remoteRoot) {\n      for (const child of remoteRoot.children) {\n        remoteRoot.removeChild(child);\n      }\n    },\n\n    // Update children\n    appendInitialChild(parent, child) {\n      parent.append(child);\n    },\n\n    appendChild(parent, child) {\n      parent.append(child);\n    },\n\n    insertBefore(parent, newChild, beforeChild) {\n      parent.insertBefore(newChild, beforeChild);\n    },\n\n    removeChild(parent, child) {\n      parent.removeChild(child);\n    },\n\n    // Unknown\n    finalizeInitialChildren() {\n      return false;\n    },\n\n    shouldSetTextContent() {\n      return false;\n    },\n\n    getPublicInstance() {},\n\n    prepareForCommit() {\n      return null;\n    },\n\n    resetAfterCommit() {},\n\n    commitMount() {},\n\n    preparePortalMount() {}\n\n  });\n};\n\nfunction handleErrorInNextTick(error) {\n  setTimeout(() => {\n    throw error;\n  });\n}\n\nconst {\n  hasOwnProperty\n} = {};\n\nfunction has(object, property) {\n  return hasOwnProperty.call(object, property);\n}\n\nexports.createReconciler = createReconciler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}