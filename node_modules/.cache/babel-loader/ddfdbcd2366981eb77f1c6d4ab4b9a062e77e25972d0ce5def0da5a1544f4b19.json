{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar rpc = require('@remote-ui/rpc');\nvar types = require('./types.js');\nvar utilities = require('./utilities.js');\nconst ROOT_ID = Symbol('RootId');\nfunction createRemoteChannel({\n  mount,\n  insertChild,\n  removeChild,\n  updateProps,\n  updateText\n}) {\n  const messageMap = new Map([[types.ACTION_MOUNT, mount], [types.ACTION_REMOVE_CHILD, removeChild], [types.ACTION_INSERT_CHILD, insertChild], [types.ACTION_UPDATE_PROPS, updateProps], [types.ACTION_UPDATE_TEXT, updateText]]);\n  return (type, ...args) => messageMap.get(type)(...args);\n}\nfunction createRemoteReceiver() {\n  const queuedUpdates = new Set();\n  const listeners = new Map();\n  const attachmentSubscribers = new Map();\n  let timeout = null;\n  let state = 'unmounted';\n  const root = {\n    id: ROOT_ID,\n    kind: types.KIND_ROOT,\n    children: [],\n    version: 0\n  };\n  const attachedNodes = new Map([[ROOT_ID, root]]);\n  const receive = createRemoteChannel({\n    mount: children => {\n      const root = attachedNodes.get(ROOT_ID);\n      const normalizedChildren = children.map(child => normalizeNode(child, addVersion));\n      root.version += 1;\n      root.children = normalizedChildren;\n      state = 'mounted';\n      for (const child of normalizedChildren) {\n        rpc.retain(child);\n        attach(child);\n      } // eslint-disable-next-line promise/catch-or-return\n\n      enqueueUpdate(root).then(() => {\n        emit('mount');\n      });\n    },\n    insertChild: (id, index, child, existingId) => {\n      const attached = attachedNodes.get(id !== null && id !== void 0 ? id : ROOT_ID);\n      const {\n        children\n      } = attached;\n      let existingAttached;\n      let normalizedChild;\n      if (id === existingId) {\n        existingAttached = attached;\n      } else if (existingId !== false) {\n        existingAttached = attachedNodes.get(existingId !== null && existingId !== void 0 ? existingId : ROOT_ID);\n      }\n      if (existingAttached) {\n        const childId = child.id;\n        const existingChildren = existingAttached.children;\n        const existingIndex = existingChildren.findIndex(child => child.id === childId);\n        const [removed] = existingChildren.splice(existingIndex, 1);\n        normalizedChild = removed; // If we are just moving the child to a different index in the same node,\n        // we donâ€™t need to enqueue an update, because that will be done for this\n        // node below.\n\n        if (id !== existingId) {\n          existingAttached.version += 1;\n          enqueueUpdate(existingAttached);\n        }\n      } else {\n        normalizedChild = normalizeNode(child, addVersion);\n        rpc.retain(normalizedChild);\n        attach(normalizedChild);\n      }\n      if (index === children.length) {\n        children.push(normalizedChild);\n      } else {\n        children.splice(index, 0, normalizedChild);\n      }\n      attached.version += 1;\n      enqueueUpdate(attached);\n    },\n    removeChild: (id, index) => {\n      const attached = attachedNodes.get(id !== null && id !== void 0 ? id : ROOT_ID);\n      const {\n        children\n      } = attached;\n      const [removed] = children.splice(index, 1);\n      attached.version += 1;\n      detach(removed); // eslint-disable-next-line promise/catch-or-return\n\n      enqueueUpdate(attached).then(() => {\n        rpc.release(removed);\n      });\n    },\n    updateProps: (id, newProps) => {\n      const component = attachedNodes.get(id);\n      const oldProps = {\n        ...component.props\n      };\n      rpc.retain(newProps);\n      Object.keys(newProps).forEach(key => {\n        const newProp = newProps[key];\n        const oldProp = oldProps[key];\n        if (isRemoteReceiverAttachableFragment(oldProp)) {\n          detach(oldProp);\n        }\n        if (isRemoteFragmentSerialization(newProp)) {\n          const attachableNewProp = normalizeNode(newProp, addVersion);\n          attach(attachableNewProp);\n        }\n      });\n      Object.assign(component.props, newProps);\n      component.version += 1; // eslint-disable-next-line promise/catch-or-return\n\n      enqueueUpdate(component).then(() => {\n        for (const key of Object.keys(newProps)) {\n          rpc.release(oldProps[key]);\n        }\n      });\n    },\n    updateText: (id, newText) => {\n      const text = attachedNodes.get(id);\n      text.text = newText;\n      text.version += 1;\n      enqueueUpdate(text);\n    }\n  });\n  return {\n    get state() {\n      return state;\n    },\n    receive,\n    attached: {\n      root,\n      get({\n        id\n      }) {\n        var _ref;\n        return (_ref = attachedNodes.get(id)) !== null && _ref !== void 0 ? _ref : null;\n      },\n      subscribe({\n        id\n      }, subscriber) {\n        let subscribers = attachmentSubscribers.get(id);\n        if (subscribers == null) {\n          subscribers = new Set();\n          attachmentSubscribers.set(id, subscribers);\n        }\n        subscribers.add(subscriber);\n        return () => {\n          const subscribers = attachmentSubscribers.get(id);\n          if (subscribers) {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n              attachmentSubscribers.delete(id);\n            }\n          }\n        };\n      }\n    },\n    flush,\n    on(event, listener) {\n      let listenersForEvent = listeners.get(event);\n      if (listenersForEvent == null) {\n        listenersForEvent = new Set();\n        listeners.set(event, listenersForEvent);\n      }\n      listenersForEvent.add(listener);\n      return () => {\n        const listenersForEvent = listeners.get(event);\n        if (listenersForEvent) {\n          listenersForEvent.delete(listener);\n          if (listenersForEvent.size === 0) {\n            listeners.delete(event);\n          }\n        }\n      };\n    }\n  };\n  function flush() {\n    var _timeout;\n    return (_timeout = timeout) !== null && _timeout !== void 0 ? _timeout : Promise.resolve();\n  }\n  function emit(event) {\n    const listenersForEvent = listeners.get(event);\n    if (listenersForEvent) {\n      for (const listener of listenersForEvent) {\n        listener();\n      }\n    }\n  }\n  function enqueueUpdate(attached) {\n    var _timeout2;\n    timeout = (_timeout2 = timeout) !== null && _timeout2 !== void 0 ? _timeout2 : new Promise(resolve => {\n      setTimeout(() => {\n        const attachedToUpdate = [...queuedUpdates];\n        timeout = null;\n        queuedUpdates.clear();\n        for (const attached of attachedToUpdate) {\n          const subscribers = attachmentSubscribers.get(attached.id);\n          if (subscribers) {\n            for (const subscriber of subscribers) {\n              subscriber(attached);\n            }\n          }\n        }\n        resolve();\n      }, 0);\n    });\n    queuedUpdates.add(attached);\n    return timeout;\n  }\n  function attach(child) {\n    attachedNodes.set(child.id, child);\n    if (child.kind === types.KIND_COMPONENT && 'props' in child) {\n      const {\n        props = {}\n      } = child;\n      Object.keys(props).forEach(key => {\n        const prop = props[key];\n        if (!isRemoteReceiverAttachableFragment(prop)) return;\n        attach(prop);\n      });\n    }\n    if ('children' in child) {\n      for (const grandChild of child.children) {\n        attach(grandChild);\n      }\n    }\n  }\n  function detach(child) {\n    attachedNodes.delete(child.id);\n    if (child.kind === types.KIND_COMPONENT && 'props' in child) {\n      const {\n        props = {}\n      } = child;\n      Object.keys(props).forEach(key => {\n        const prop = props[key];\n        if (!isRemoteReceiverAttachableFragment(prop)) return;\n        detach(prop);\n      });\n    }\n    if ('children' in child) {\n      for (const grandChild of child.children) {\n        detach(grandChild);\n      }\n    }\n  }\n}\nfunction addVersion(value) {\n  value.version = 0;\n  return value;\n}\nfunction normalizeNode(node, normalizer) {\n  if (node.kind === types.KIND_FRAGMENT || node.kind === types.KIND_COMPONENT) {\n    node.children.forEach(child => normalizeNode(child, normalizer));\n  }\n  if (node.kind === types.KIND_COMPONENT && 'props' in node) {\n    const {\n      props\n    } = node;\n    for (const key of Object.keys(props)) {\n      const prop = props[key];\n      if (!isRemoteFragmentSerialization(prop)) continue;\n      props[key] = normalizeNode(prop, normalizer);\n    }\n  }\n  return normalizer(node);\n}\nfunction isRemoteFragmentSerialization(object) {\n  return utilities.isRemoteFragment(object) && 'id' in object && 'children' in object;\n}\nfunction isRemoteReceiverAttachableFragment(object) {\n  return isRemoteFragmentSerialization(object) && 'version' in object;\n}\nexports.ROOT_ID = ROOT_ID;\nexports.createRemoteChannel = createRemoteChannel;\nexports.createRemoteReceiver = createRemoteReceiver;\nexports.isRemoteFragmentSerialization = isRemoteFragmentSerialization;\nexports.isRemoteReceiverAttachableFragment = isRemoteReceiverAttachableFragment;","map":{"version":3,"names":["Object","defineProperty","exports","value","rpc","require","types","utilities","ROOT_ID","Symbol","createRemoteChannel","mount","insertChild","removeChild","updateProps","updateText","messageMap","Map","ACTION_MOUNT","ACTION_REMOVE_CHILD","ACTION_INSERT_CHILD","ACTION_UPDATE_PROPS","ACTION_UPDATE_TEXT","type","args","get","createRemoteReceiver","queuedUpdates","Set","listeners","attachmentSubscribers","timeout","state","root","id","kind","KIND_ROOT","children","version","attachedNodes","receive","normalizedChildren","map","child","normalizeNode","addVersion","retain","attach","enqueueUpdate","then","emit","index","existingId","attached","existingAttached","normalizedChild","childId","existingChildren","existingIndex","findIndex","removed","splice","length","push","detach","release","newProps","component","oldProps","props","keys","forEach","key","newProp","oldProp","isRemoteReceiverAttachableFragment","isRemoteFragmentSerialization","attachableNewProp","assign","newText","text","_ref","subscribe","subscriber","subscribers","set","add","delete","size","flush","on","event","listener","listenersForEvent","_timeout","Promise","resolve","_timeout2","setTimeout","attachedToUpdate","clear","KIND_COMPONENT","prop","grandChild","node","normalizer","KIND_FRAGMENT","object","isRemoteFragment"],"sources":["/Users/raghavvherugu/Desktop/Projects/name/Jila/node_modules/@remote-ui/core/build/cjs/receiver.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar rpc = require('@remote-ui/rpc');\nvar types = require('./types.js');\nvar utilities = require('./utilities.js');\n\nconst ROOT_ID = Symbol('RootId');\nfunction createRemoteChannel({\n  mount,\n  insertChild,\n  removeChild,\n  updateProps,\n  updateText\n}) {\n  const messageMap = new Map([[types.ACTION_MOUNT, mount], [types.ACTION_REMOVE_CHILD, removeChild], [types.ACTION_INSERT_CHILD, insertChild], [types.ACTION_UPDATE_PROPS, updateProps], [types.ACTION_UPDATE_TEXT, updateText]]);\n  return (type, ...args) => messageMap.get(type)(...args);\n}\nfunction createRemoteReceiver() {\n  const queuedUpdates = new Set();\n  const listeners = new Map();\n  const attachmentSubscribers = new Map();\n  let timeout = null;\n  let state = 'unmounted';\n  const root = {\n    id: ROOT_ID,\n    kind: types.KIND_ROOT,\n    children: [],\n    version: 0\n  };\n  const attachedNodes = new Map([[ROOT_ID, root]]);\n  const receive = createRemoteChannel({\n    mount: children => {\n      const root = attachedNodes.get(ROOT_ID);\n      const normalizedChildren = children.map(child => normalizeNode(child, addVersion));\n      root.version += 1;\n      root.children = normalizedChildren;\n      state = 'mounted';\n\n      for (const child of normalizedChildren) {\n        rpc.retain(child);\n        attach(child);\n      } // eslint-disable-next-line promise/catch-or-return\n\n\n      enqueueUpdate(root).then(() => {\n        emit('mount');\n      });\n    },\n    insertChild: (id, index, child, existingId) => {\n      const attached = attachedNodes.get(id !== null && id !== void 0 ? id : ROOT_ID);\n      const {\n        children\n      } = attached;\n      let existingAttached;\n      let normalizedChild;\n\n      if (id === existingId) {\n        existingAttached = attached;\n      } else if (existingId !== false) {\n        existingAttached = attachedNodes.get(existingId !== null && existingId !== void 0 ? existingId : ROOT_ID);\n      }\n\n      if (existingAttached) {\n        const childId = child.id;\n        const existingChildren = existingAttached.children;\n        const existingIndex = existingChildren.findIndex(child => child.id === childId);\n        const [removed] = existingChildren.splice(existingIndex, 1);\n        normalizedChild = removed; // If we are just moving the child to a different index in the same node,\n        // we donâ€™t need to enqueue an update, because that will be done for this\n        // node below.\n\n        if (id !== existingId) {\n          existingAttached.version += 1;\n          enqueueUpdate(existingAttached);\n        }\n      } else {\n        normalizedChild = normalizeNode(child, addVersion);\n        rpc.retain(normalizedChild);\n        attach(normalizedChild);\n      }\n\n      if (index === children.length) {\n        children.push(normalizedChild);\n      } else {\n        children.splice(index, 0, normalizedChild);\n      }\n\n      attached.version += 1;\n      enqueueUpdate(attached);\n    },\n    removeChild: (id, index) => {\n      const attached = attachedNodes.get(id !== null && id !== void 0 ? id : ROOT_ID);\n      const {\n        children\n      } = attached;\n      const [removed] = children.splice(index, 1);\n      attached.version += 1;\n      detach(removed); // eslint-disable-next-line promise/catch-or-return\n\n      enqueueUpdate(attached).then(() => {\n        rpc.release(removed);\n      });\n    },\n    updateProps: (id, newProps) => {\n      const component = attachedNodes.get(id);\n      const oldProps = { ...component.props\n      };\n      rpc.retain(newProps);\n      Object.keys(newProps).forEach(key => {\n        const newProp = newProps[key];\n        const oldProp = oldProps[key];\n\n        if (isRemoteReceiverAttachableFragment(oldProp)) {\n          detach(oldProp);\n        }\n\n        if (isRemoteFragmentSerialization(newProp)) {\n          const attachableNewProp = normalizeNode(newProp, addVersion);\n          attach(attachableNewProp);\n        }\n      });\n      Object.assign(component.props, newProps);\n      component.version += 1; // eslint-disable-next-line promise/catch-or-return\n\n      enqueueUpdate(component).then(() => {\n        for (const key of Object.keys(newProps)) {\n          rpc.release(oldProps[key]);\n        }\n      });\n    },\n    updateText: (id, newText) => {\n      const text = attachedNodes.get(id);\n      text.text = newText;\n      text.version += 1;\n      enqueueUpdate(text);\n    }\n  });\n  return {\n    get state() {\n      return state;\n    },\n\n    receive,\n    attached: {\n      root,\n\n      get({\n        id\n      }) {\n        var _ref;\n\n        return (_ref = attachedNodes.get(id)) !== null && _ref !== void 0 ? _ref : null;\n      },\n\n      subscribe({\n        id\n      }, subscriber) {\n        let subscribers = attachmentSubscribers.get(id);\n\n        if (subscribers == null) {\n          subscribers = new Set();\n          attachmentSubscribers.set(id, subscribers);\n        }\n\n        subscribers.add(subscriber);\n        return () => {\n          const subscribers = attachmentSubscribers.get(id);\n\n          if (subscribers) {\n            subscribers.delete(subscriber);\n\n            if (subscribers.size === 0) {\n              attachmentSubscribers.delete(id);\n            }\n          }\n        };\n      }\n\n    },\n    flush,\n\n    on(event, listener) {\n      let listenersForEvent = listeners.get(event);\n\n      if (listenersForEvent == null) {\n        listenersForEvent = new Set();\n        listeners.set(event, listenersForEvent);\n      }\n\n      listenersForEvent.add(listener);\n      return () => {\n        const listenersForEvent = listeners.get(event);\n\n        if (listenersForEvent) {\n          listenersForEvent.delete(listener);\n\n          if (listenersForEvent.size === 0) {\n            listeners.delete(event);\n          }\n        }\n      };\n    }\n\n  };\n\n  function flush() {\n    var _timeout;\n\n    return (_timeout = timeout) !== null && _timeout !== void 0 ? _timeout : Promise.resolve();\n  }\n\n  function emit(event) {\n    const listenersForEvent = listeners.get(event);\n\n    if (listenersForEvent) {\n      for (const listener of listenersForEvent) {\n        listener();\n      }\n    }\n  }\n\n  function enqueueUpdate(attached) {\n    var _timeout2;\n\n    timeout = (_timeout2 = timeout) !== null && _timeout2 !== void 0 ? _timeout2 : new Promise(resolve => {\n      setTimeout(() => {\n        const attachedToUpdate = [...queuedUpdates];\n        timeout = null;\n        queuedUpdates.clear();\n\n        for (const attached of attachedToUpdate) {\n          const subscribers = attachmentSubscribers.get(attached.id);\n\n          if (subscribers) {\n            for (const subscriber of subscribers) {\n              subscriber(attached);\n            }\n          }\n        }\n\n        resolve();\n      }, 0);\n    });\n    queuedUpdates.add(attached);\n    return timeout;\n  }\n\n  function attach(child) {\n    attachedNodes.set(child.id, child);\n\n    if (child.kind === types.KIND_COMPONENT && 'props' in child) {\n      const {\n        props = {}\n      } = child;\n      Object.keys(props).forEach(key => {\n        const prop = props[key];\n        if (!isRemoteReceiverAttachableFragment(prop)) return;\n        attach(prop);\n      });\n    }\n\n    if ('children' in child) {\n      for (const grandChild of child.children) {\n        attach(grandChild);\n      }\n    }\n  }\n\n  function detach(child) {\n    attachedNodes.delete(child.id);\n\n    if (child.kind === types.KIND_COMPONENT && 'props' in child) {\n      const {\n        props = {}\n      } = child;\n      Object.keys(props).forEach(key => {\n        const prop = props[key];\n        if (!isRemoteReceiverAttachableFragment(prop)) return;\n        detach(prop);\n      });\n    }\n\n    if ('children' in child) {\n      for (const grandChild of child.children) {\n        detach(grandChild);\n      }\n    }\n  }\n}\n\nfunction addVersion(value) {\n  value.version = 0;\n  return value;\n}\n\nfunction normalizeNode(node, normalizer) {\n  if (node.kind === types.KIND_FRAGMENT || node.kind === types.KIND_COMPONENT) {\n    node.children.forEach(child => normalizeNode(child, normalizer));\n  }\n\n  if (node.kind === types.KIND_COMPONENT && 'props' in node) {\n    const {\n      props\n    } = node;\n\n    for (const key of Object.keys(props)) {\n      const prop = props[key];\n      if (!isRemoteFragmentSerialization(prop)) continue;\n      props[key] = normalizeNode(prop, normalizer);\n    }\n  }\n\n  return normalizer(node);\n}\n\nfunction isRemoteFragmentSerialization(object) {\n  return utilities.isRemoteFragment(object) && 'id' in object && 'children' in object;\n}\nfunction isRemoteReceiverAttachableFragment(object) {\n  return isRemoteFragmentSerialization(object) && 'version' in object;\n}\n\nexports.ROOT_ID = ROOT_ID;\nexports.createRemoteChannel = createRemoteChannel;\nexports.createRemoteReceiver = createRemoteReceiver;\nexports.isRemoteFragmentSerialization = isRemoteFragmentSerialization;\nexports.isRemoteReceiverAttachableFragment = isRemoteReceiverAttachableFragment;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}