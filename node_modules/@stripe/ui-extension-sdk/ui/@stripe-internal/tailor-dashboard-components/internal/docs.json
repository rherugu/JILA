[
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "BarChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "The data used to generate the chart.",
        "name": "data",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Record<string | number, any>[]"
        },
        "tags": {
          "external": ""
        }
      },
      "x": {
        "defaultValue": null,
        "description": "The property or accessor for the point on the x axis.",
        "name": "x",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "y": {
        "defaultValue": null,
        "description": "The property or accessor for the point on the y axis.",
        "name": "y",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "z": {
        "defaultValue": null,
        "description": "Groups data based on a property or accessor.",
        "name": "z",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Groups data by color based on a property or accessor.",
        "name": "color",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number | Omit<Channel, \"range\">"
        },
        "tags": {
          "external": ""
        }
      },
      "axis": {
        "defaultValue": null,
        "description": "Determines whether to render labels and ticks for each axis.",
        "name": "axis",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"none\" | \"x\" | \"y\" | \"both\""
        },
        "tags": {
          "external": ""
        }
      },
      "grid": {
        "defaultValue": null,
        "description": "Determines whether to render grid lines for each axis.",
        "name": "grid",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"none\" | \"x\" | \"y\" | \"both\""
        },
        "tags": {
          "external": ""
        }
      },
      "legend": {
        "defaultValue": null,
        "description": "Determines whether to render the legend (when more than one item is present).",
        "name": "legend",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": ""
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Determines whether to render a tooltip when hovering over the chart.",
        "name": "tooltip",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "LineChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "The data used to generate the chart.",
        "name": "data",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Record<string | number, any>[]"
        },
        "tags": {
          "external": ""
        }
      },
      "x": {
        "defaultValue": null,
        "description": "The property or accessor for the point on the x axis.",
        "name": "x",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "y": {
        "defaultValue": null,
        "description": "The property or accessor for the point on the y axis.",
        "name": "y",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "z": {
        "defaultValue": null,
        "description": "Groups data based on a property or accessor.",
        "name": "z",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Groups data by color based on a property or accessor.",
        "name": "color",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number | Omit<Channel, \"range\">"
        },
        "tags": {
          "external": ""
        }
      },
      "axis": {
        "defaultValue": null,
        "description": "Determines whether to render labels and ticks for each axis.",
        "name": "axis",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"none\" | \"x\" | \"y\" | \"both\""
        },
        "tags": {
          "external": ""
        }
      },
      "grid": {
        "defaultValue": null,
        "description": "Determines whether to render grid lines for each axis.",
        "name": "grid",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"none\" | \"x\" | \"y\" | \"both\""
        },
        "tags": {
          "external": ""
        }
      },
      "legend": {
        "defaultValue": null,
        "description": "Determines whether to render the legend (when more than one item is present).",
        "name": "legend",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": ""
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Determines whether to render a tooltip when hovering over the chart.",
        "name": "tooltip",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "Sparkline",
    "methods": [],
    "props": {
      "x": {
        "defaultValue": null,
        "description": "The property or accessor for the point on the x axis.",
        "name": "x",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "y": {
        "defaultValue": null,
        "description": "The property or accessor for the point on the y axis.",
        "name": "y",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The data used to generate the chart.",
        "name": "data",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Record<string | number, any>[]"
        },
        "tags": {
          "external": ""
        }
      },
      "z": {
        "defaultValue": null,
        "description": "Groups data based on a property or accessor.",
        "name": "z",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Accessor"
        },
        "tags": {
          "external": ""
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Groups data by color based on a property or accessor.",
        "name": "color",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number | Omit<Channel, \"range\">"
        },
        "tags": {
          "external": ""
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Determines whether to render a tooltip when hovering over the chart.",
        "name": "tooltip",
        "parent": {
          "name": "ChartProps"
        },
        "declarations": [
          {
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "ContextView",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title of the ContextView. This will be displayed at the top\nof the drawer under that app's name.",
        "name": "title",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "description": {
        "defaultValue": null,
        "description": "A description of the view's purpose, can also be used as a subtitle.",
        "name": "description",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "externalLink": {
        "defaultValue": null,
        "description": "A link to an external webpage. This should generally allow the user to\nview related information on another site with more context than what\nthe app makes available in the app drawer.",
        "name": "externalLink",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "{ label: string; href: string; }"
        },
        "tags": {
          "external": ""
        }
      },
      "actions": {
        "defaultValue": null,
        "description": "A React fragment containing up to three Buttons that will be displayed\ndirectly under the header and above the children of the ContextView.",
        "name": "actions",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        },
        "tags": {
          "external": ""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The contents of the ContextView.",
        "name": "children",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        },
        "tags": {
          "external": ""
        }
      },
      "banner": {
        "defaultValue": null,
        "description": "A Banner component that will be displayed directly under the header and\nabove the children of the ContextView.",
        "name": "banner",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<Component<BannerProps>>"
        },
        "tags": {
          "external": ""
        }
      },
      "primaryAction": {
        "defaultValue": null,
        "description": "A primary call to action (\"Save\" or \"Continue\") button placed in the footer.",
        "name": "primaryAction",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<Component<ButtonProps>>"
        },
        "tags": {
          "external": ""
        }
      },
      "secondaryAction": {
        "defaultValue": null,
        "description": "A secondary call to action (\"Cancel\") button placed in the footer.",
        "name": "secondaryAction",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<Component<ButtonProps>>"
        },
        "tags": {
          "external": ""
        }
      },
      "footerContent": {
        "defaultValue": null,
        "description": "React node adjacent to any actions in the footer.",
        "name": "footerContent",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        },
        "tags": {
          "external": ""
        }
      },
      "brandIcon": {
        "defaultValue": null,
        "description": "A square, 1-color SVG that contrasts well with `brandColor`.",
        "name": "brandIcon",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "brandColor": {
        "defaultValue": null,
        "description": "A CSS color that contrasts well with `brandIcon`.",
        "name": "brandColor",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "FocusView",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title of the FocusView. This will be displayed at the top\nof the drawer under your app's name.",
        "name": "title",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "primaryAction": {
        "defaultValue": null,
        "description": "A primary call to action (\"Save\" or \"Continue\") button placed in the footer.",
        "name": "primaryAction",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<Component<ButtonProps>>"
        },
        "tags": {
          "external": ""
        }
      },
      "secondaryAction": {
        "defaultValue": null,
        "description": "A secondary call to action (\"Cancel\") button placed in the footer.",
        "name": "secondaryAction",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<Component<ButtonProps>>"
        },
        "tags": {
          "external": ""
        }
      },
      "footerContent": {
        "defaultValue": null,
        "description": "React node adjacent to any actions in the footer.",
        "name": "footerContent",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        },
        "tags": {
          "external": ""
        }
      },
      "shown": {
        "defaultValue": null,
        "description": "Whether the FocusView should be shown or not. This property is maintained by a parent view.",
        "name": "shown",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": ""
        }
      },
      "setShown": {
        "defaultValue": null,
        "description": "Allows the FocusView to manage shown state if a user requests to close the window, or if\nit needs to stay open because of the close confirmation dialog.",
        "name": "setShown",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "((shown: boolean) => void)"
        },
        "tags": {
          "external": ""
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "(Deprecated, use `setShown` instead) If the user clicks out of the FocusView or presses\nthe escape button, this informs the extension that the user has closed the view.",
        "name": "onClose",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        },
        "tags": {
          "external": "",
          "deprecated": "Use `setShown` instead."
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The contents of the FocusView.",
        "name": "children",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "tags": {
          "external": ""
        }
      },
      "confirmCloseMessages": {
        "defaultValue": null,
        "description": "If provided, confirmCloseMessages will be displayed when the user closes the FocusView.",
        "name": "confirmCloseMessages",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "{ title: string; description: string; cancelAction: string; exitAction: string; }"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "Img",
    "methods": [],
    "props": {
      "src": {
        "defaultValue": null,
        "description": "The source of the image.",
        "name": "src",
        "parent": {
          "name": "BaseProps"
        },
        "declarations": [
          {
            "name": "BaseProps"
          },
          {
            "name": "SrcProps"
          },
          {
            "name": "BaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "srcSet": {
        "defaultValue": null,
        "description": "The source set of the image.",
        "name": "srcSet",
        "parent": {
          "name": "BaseProps"
        },
        "declarations": [
          {
            "name": "BaseProps"
          },
          {
            "name": "BaseProps"
          },
          {
            "name": "SrcSetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "sizes": {
        "defaultValue": null,
        "description": "The sizes of the image (for use with srcSet).",
        "name": "sizes",
        "parent": {
          "name": "BaseProps"
        },
        "declarations": [
          {
            "name": "BaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "height": {
        "defaultValue": null,
        "description": "The height of the image.",
        "name": "height",
        "parent": {
          "name": "BaseProps"
        },
        "declarations": [
          {
            "name": "BaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        },
        "tags": {
          "external": ""
        }
      },
      "width": {
        "defaultValue": null,
        "description": "The width of the image.",
        "name": "width",
        "parent": {
          "name": "BaseProps"
        },
        "declarations": [
          {
            "name": "BaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        },
        "tags": {
          "external": ""
        }
      },
      "alt": {
        "defaultValue": null,
        "description": "The alternative text of the image.",
        "name": "alt",
        "parent": {
          "name": "BaseProps"
        },
        "declarations": [
          {
            "name": "BaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "crossOrigin": {
        "defaultValue": null,
        "description": "Cross-origin support for the image.",
        "name": "crossOrigin",
        "parent": {
          "name": "BaseProps"
        },
        "declarations": [
          {
            "name": "BaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"anonymous\""
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "Link",
    "methods": [],
    "props": {
      "type": {
        "defaultValue": null,
        "description": "The type of the link",
        "name": "type",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\""
        },
        "tags": {
          "external": ""
        }
      },
      "onPress": {
        "defaultValue": null,
        "description": "Handler that is called when the press is released over the target.",
        "name": "onPress",
        "parent": {
          "name": "PressEvents"
        },
        "declarations": [
          {
            "name": "PressEvents"
          },
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "((e: PressEvent) => void)"
        },
        "tags": {
          "external": ""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the action is disabled.",
        "name": "disabled",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": ""
        }
      },
      "href": {
        "defaultValue": null,
        "description": "Native `href` attribute",
        "name": "href",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "type": "string",
          "external": ""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The css class name",
        "name": "className",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "",
        "name": "rel",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "",
        "name": "tabIndex",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        },
        "tags": {
          "external": ""
        }
      },
      "target": {
        "defaultValue": null,
        "description": "The anchor target",
        "name": "target",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "HTMLAttributeAnchorTarget"
        },
        "tags": {
          "external": ""
        }
      },
      "external": {
        "defaultValue": null,
        "description": "Whether linking out to an external resource",
        "name": "external",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "SettingsView",
    "methods": [],
    "props": {
      "onSave": {
        "defaultValue": null,
        "description": "If provided, a \"Save\" button will be rendered with the SettingsView.\nThis callback will be called when the button is clicked.",
        "name": "onSave",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "((values: { [key: string]: string; }) => void)"
        },
        "tags": {
          "external": ""
        }
      },
      "statusMessage": {
        "defaultValue": null,
        "description": "A string to display a status such as \"Saved\" or \"Error\"\nin the footer of the view.",
        "name": "statusMessage",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The contents of the SettingsView, usually a Form or some\nother content surrounding a form.",
        "name": "children",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "StripeFileUploader",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "The text label for the file uploader",
        "name": "label",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "purpose": {
        "defaultValue": null,
        "description": "The upload purpose. See: https://stripe.com/docs/api/files/object#purpose",
        "name": "purpose",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "onComplete": {
        "defaultValue": null,
        "description": "A callback that will be called with the file object when the upload is complete. See: https://stripe.com/docs/api/files/object",
        "name": "onComplete",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "((fileObject: { id: string; object: string; created: number; expires_at?: number; filename?: string; links: { object: string; data: { id: string; object: string; created: number; expired: boolean; ... 4 more ...; url?: string | undefined; }[]; has_more: boolean; url: string; }; ... 4 more ......"
        },
        "tags": {
          "external": ""
        }
      },
      "onError": {
        "defaultValue": null,
        "description": "A callback that will be called if the upload fails",
        "name": "onError",
        "declarations": [
          {
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "((error: any) => void)"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "SignInView",
    "methods": [],
    "props": {
      "description": {
        "defaultValue": null,
        "description": "A paragraph description of the app and its features.",
        "name": "description",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "descriptionActionLabel": {
        "defaultValue": null,
        "description": "An action label (\"Learn more\" or \"View demo\", for example) below the description.",
        "name": "descriptionActionLabel",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "descriptionActionContents": {
        "defaultValue": null,
        "description": "Description action contents that open in a FocusView.",
        "name": "descriptionActionContents",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        },
        "tags": {
          "external": ""
        }
      },
      "descriptionActionTitle": {
        "defaultValue": null,
        "description": "The title in the FocusView for the description action.",
        "name": "descriptionActionTitle",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "primaryAction": {
        "defaultValue": null,
        "description": "A primary call to action (\"Sign in\" or \"Authenticate\", for example) button placed in the footer.",
        "name": "primaryAction",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "{ label: string; href: string; target?: string; onPress?: (() => void); } | { label: string; href?: string | undefined; target?: string | undefined; onPress: () => void; } | undefined"
        },
        "tags": {
          "external": ""
        }
      },
      "secondaryAction": {
        "defaultValue": null,
        "description": "A secondary call to action (\"Sign up\", for example) link placed in the footer.",
        "name": "secondaryAction",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "{ label: string; href: string; target?: string; onPress?: (() => void); } | { label: string; href?: string | undefined; target?: string | undefined; onPress: () => void; } | undefined"
        },
        "tags": {
          "external": ""
        }
      },
      "footerContent": {
        "defaultValue": null,
        "description": "React node below the primary action in the footer.",
        "name": "footerContent",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        },
        "tags": {
          "external": ""
        }
      },
      "brandIcon": {
        "defaultValue": null,
        "description": "A square, 1-color SVG that contrasts well with `brandColor`.",
        "name": "brandIcon",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      },
      "brandColor": {
        "defaultValue": null,
        "description": "A CSS color that contrasts well with `brandIcon`.",
        "name": "brandColor",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        },
        "tags": {
          "external": ""
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        },
        "tags": {
          "external": "Whether or not the tab should be disabled"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "tags": {
          "external": "Children passed to Tab component"
        }
      },
      "tabKey": {
        "defaultValue": null,
        "description": "",
        "name": "tabKey",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        },
        "tags": {
          "external": "A unique identifier to use with the Tabs `selectedKey`"
        }
      }
    }
  },
  {
    "tags": {
      "external": ""
    },
    "description": "",
    "displayName": "TabPanel",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "tags": {
          "external": "Children passed to TabPanel component"
        }
      },
      "tabKey": {
        "defaultValue": null,
        "description": "",
        "name": "tabKey",
        "parent": {
          "name": "Props"
        },
        "declarations": [
          {
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        },
        "tags": {
          "external": "A unique identifier to use with the Tabs `selectedKey`"
        }
      }
    }
  }
]
