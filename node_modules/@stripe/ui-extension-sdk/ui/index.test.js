"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const testing_1 = require("../testing");
const index_1 = require("./index");
describe('Box', () => {
    it('renders with text and CSS props', () => {
        const { wrapper } = (0, testing_1.render)((0, jsx_runtime_1.jsx)(index_1.Box, Object.assign({ css: { padding: 'large' } }, { children: "Hello" })));
        const box = wrapper.find(index_1.Box);
        expect(box).toContainText('Hello');
        expect(box).toHaveProps({ css: { padding: 'large' } });
    });
});
describe('Button', () => {
    it('renders with text and CSS props', () => {
        const onPress = jest.fn();
        const { wrapper } = (0, testing_1.render)((0, jsx_runtime_1.jsx)(index_1.Button, Object.assign({ onPress: onPress }, { children: "Hello" })));
        const button = wrapper.find(index_1.Button);
        expect(button).toContainText('Hello');
        button === null || button === void 0 ? void 0 : button.trigger('onPress');
        expect(onPress).toHaveBeenCalled();
    });
});
describe('ListItem', () => {
    it('renders with text', () => {
        const { wrapper } = (0, testing_1.render)((0, jsx_runtime_1.jsx)(index_1.ListItem, { children: "Hello" }));
        expect(wrapper.find(index_1.ListItem)).toContainText('Hello');
    });
});
//# sourceMappingURL=index.test.js.map