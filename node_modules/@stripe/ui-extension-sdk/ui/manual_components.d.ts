import { BasicTableBodyProps, BasicTableCellProps, BasicTableFooterProps, BasicTableHeaderCellProps, BasicTableHeaderProps, BasicTableProps, BasicTableRowProps, ButtonProps, CheckboxProps, IconProps as SailIconProps, RadioProps, SelectProps, StylableProps, SwitchProps, TailorDateFieldProps, TextAreaProps, TextFieldProps, TokenizedCSSProperties } from './@sail/ui/internal/interface';
import { LinkProps } from './@stripe-internal/tailor-dashboard-components/internal/interface';
declare type ExposeCSS<P, T extends keyof TokenizedCSSProperties> = P & {
    css?: Pick<TokenizedCSSProperties, T>;
};
declare type DeprecateValue<T> = T & {
    /**
     * @deprecated Controlled inputs are not recommended. See: https://stripe.com/docs/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions
     */
    value?: string | number;
};
declare type DeprecateChecked<T> = T & {
    /**
     * @deprecated Controlled inputs are not recommended. See: https://stripe.com/docs/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions
     */
    checked?: boolean;
};
export declare const Box: "Box" & {
    readonly type?: "Box" | undefined;
    readonly props?: (StylableProps & {
        css?: {
            textOverflow?: "ellipsis" | undefined;
            wordWrap?: "normal" | "break-word" | undefined;
            overflowWrap?: "normal" | "break-word" | undefined;
            wordBreak?: "normal" | "break-word" | "break-all" | "keep-all" | undefined;
            textTransform?: "none" | "full-width" | "capitalize" | "full-size-kana" | "lowercase" | "uppercase" | undefined;
            whiteSpace?: "normal" | "nowrap" | "break-spaces" | "pre" | "pre-line" | "pre-wrap" | undefined;
            overflowX?: "auto" | "hidden" | "visible" | "scroll" | undefined;
            overflowY?: "auto" | "hidden" | "visible" | "scroll" | undefined;
            textAlign?: "center" | "end" | "start" | "left" | "right" | "justify" | "match-parent" | undefined;
        } | undefined;
    }) | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Box", StylableProps & {
    css?: {
        textOverflow?: "ellipsis" | undefined;
        wordWrap?: "normal" | "break-word" | undefined;
        overflowWrap?: "normal" | "break-word" | undefined;
        wordBreak?: "normal" | "break-word" | "break-all" | "keep-all" | undefined;
        textTransform?: "none" | "full-width" | "capitalize" | "full-size-kana" | "lowercase" | "uppercase" | undefined;
        whiteSpace?: "normal" | "nowrap" | "break-spaces" | "pre" | "pre-line" | "pre-wrap" | undefined;
        overflowX?: "auto" | "hidden" | "visible" | "scroll" | undefined;
        overflowY?: "auto" | "hidden" | "visible" | "scroll" | undefined;
        textAlign?: "center" | "end" | "start" | "left" | "right" | "justify" | "match-parent" | undefined;
    } | undefined;
}, true>>;
export declare const Inline: "Inline" & {
    readonly type?: "Inline" | undefined;
    readonly props?: (StylableProps & {
        css?: {
            textTransform?: "none" | "full-width" | "capitalize" | "full-size-kana" | "lowercase" | "uppercase" | undefined;
        } | undefined;
    }) | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Inline", StylableProps & {
    css?: {
        textTransform?: "none" | "full-width" | "capitalize" | "full-size-kana" | "lowercase" | "uppercase" | undefined;
    } | undefined;
}, true>>;
export declare const TextField: "TextField" & {
    readonly type?: "TextField" | undefined;
    readonly props?: DeprecateValue<ExposeCSS<TextFieldProps, "width">> | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"TextField", DeprecateValue<ExposeCSS<TextFieldProps, "width">>, true>>;
export declare const TextArea: "TextArea" & {
    readonly type?: "TextArea" | undefined;
    readonly props?: DeprecateValue<ExposeCSS<TextAreaProps, "width">> | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"TextArea", DeprecateValue<ExposeCSS<TextAreaProps, "width">>, true>>;
export declare const Select: "Select" & {
    readonly type?: "Select" | undefined;
    readonly props?: DeprecateValue<ExposeCSS<SelectProps, "width">> | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Select", DeprecateValue<ExposeCSS<SelectProps, "width">>, true>>;
export declare const Radio: "Radio" & {
    readonly type?: "Radio" | undefined;
    readonly props?: DeprecateChecked<RadioProps> | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Radio", DeprecateChecked<RadioProps>, true>>;
export declare const Switch: "Switch" & {
    readonly type?: "Switch" | undefined;
    readonly props?: DeprecateChecked<SwitchProps> | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Switch", DeprecateChecked<SwitchProps>, true>>;
export declare const Checkbox: "Checkbox" & {
    readonly type?: "Checkbox" | undefined;
    readonly props?: DeprecateChecked<CheckboxProps> | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Checkbox", DeprecateChecked<CheckboxProps>, true>>;
export declare const Link: "Link" & {
    readonly type?: "Link" | undefined;
    readonly props?: ExposeCSS<LinkProps, "width" | "alignX"> | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Link", ExposeCSS<LinkProps, "width" | "alignX">, true>>;
export declare const Button: "Button" & {
    readonly type?: "Button" | undefined;
    readonly props?: ExposeCSS<ButtonProps, "width" | "alignX"> | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Button", ExposeCSS<ButtonProps, "width" | "alignX">, true>>;
declare type IconProps = ExposeCSS<SailIconProps, 'fill'> & {
    name: string;
};
export declare const Icon: "Icon" & {
    readonly type?: "Icon" | undefined;
    readonly props?: IconProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Icon", IconProps, true>>;
export declare const DateField: "DateField" & {
    readonly type?: "DateField" | undefined;
    readonly props?: TailorDateFieldProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"DateField", TailorDateFieldProps, true>>;
export declare const Table: "Table" & {
    readonly type?: "Table" | undefined;
    readonly props?: BasicTableProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"Table", BasicTableProps, true>>;
export declare const TableBody: "TableBody" & {
    readonly type?: "TableBody" | undefined;
    readonly props?: BasicTableBodyProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"TableBody", BasicTableBodyProps, true>>;
export declare const TableRow: "TableRow" & {
    readonly type?: "TableRow" | undefined;
    readonly props?: BasicTableRowProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"TableRow", BasicTableRowProps, true>>;
export declare const TableHead: "TableHead" & {
    readonly type?: "TableHead" | undefined;
    readonly props?: BasicTableHeaderProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"TableHead", BasicTableHeaderProps, true>>;
export declare const TableFooter: "TableFooter" & {
    readonly type?: "TableFooter" | undefined;
    readonly props?: BasicTableFooterProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"TableFooter", BasicTableFooterProps, true>>;
export declare const TableCell: "TableCell" & {
    readonly type?: "TableCell" | undefined;
    readonly props?: BasicTableCellProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"TableCell", BasicTableCellProps, true>>;
export declare const TableHeaderCell: "TableHeaderCell" & {
    readonly type?: "TableHeaderCell" | undefined;
    readonly props?: BasicTableHeaderCellProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/core").RemoteComponentType<"TableHeaderCell", BasicTableHeaderCellProps, true>>;
export {};
