"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockContextProps = exports.defaultMockContextProps = void 0;
exports.defaultMockContextProps = {
    userContext: {
        id: 'usr_1234',
        name: 'Test User',
        account: {
            country: 'US',
            id: 'acct_1234',
            name: 'Test Business',
        },
        locale: 'en-US',
        roles: [
            {
                type: 'builtIn',
                name: 'Developer',
            },
        ],
    },
    environment: {
        mode: 'test',
        viewportID: 'test.viewport',
        objectContext: {
            id: 'obj_1234',
            object: 'test_object',
        },
        platform: {
            id: 'acct_5678',
            name: 'Test Platform',
        },
    },
    appContext: {
        authorizedPermissions: ['test_permission'],
        authorizedContentSecurityPolicy: {
            connectSrc: ['https://test.com/test'],
            imageSrc: ['https://test.com/image'],
        },
    },
};
const getMockContextProps = (partialMockContext) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    return ({
        userContext: Object.assign(Object.assign(Object.assign({}, exports.defaultMockContextProps.userContext), partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.userContext), { account: Object.assign(Object.assign({}, exports.defaultMockContextProps.userContext.account), (_a = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.userContext) === null || _a === void 0 ? void 0 : _a.account), roles: ((_c = (_b = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.userContext) === null || _b === void 0 ? void 0 : _b.roles) === null || _c === void 0 ? void 0 : _c.length)
                ? (_d = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.userContext) === null || _d === void 0 ? void 0 : _d.roles
                : exports.defaultMockContextProps.userContext.roles }),
        environment: Object.assign(Object.assign(Object.assign({}, exports.defaultMockContextProps.environment), partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.environment), { objectContext: Object.assign(Object.assign({ id: '', object: '' }, exports.defaultMockContextProps.environment.objectContext), (_e = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.environment) === null || _e === void 0 ? void 0 : _e.objectContext), platform: Object.assign(Object.assign({ id: '', name: '' }, exports.defaultMockContextProps.environment.platform), (_f = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.environment) === null || _f === void 0 ? void 0 : _f.platform) }),
        appContext: Object.assign(Object.assign(Object.assign({}, exports.defaultMockContextProps.appContext), partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.appContext), { authorizedPermissions: ((_h = (_g = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.appContext) === null || _g === void 0 ? void 0 : _g.authorizedPermissions) === null || _h === void 0 ? void 0 : _h.length)
                ? (_j = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.appContext) === null || _j === void 0 ? void 0 : _j.authorizedPermissions
                : (_k = exports.defaultMockContextProps.appContext) === null || _k === void 0 ? void 0 : _k.authorizedPermissions, authorizedContentSecurityPolicy: Object.assign(Object.assign({ connectSrc: [], imageSrc: [] }, exports.defaultMockContextProps.appContext.authorizedContentSecurityPolicy), (_l = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.appContext) === null || _l === void 0 ? void 0 : _l.authorizedContentSecurityPolicy) }),
    });
};
exports.getMockContextProps = getMockContextProps;
//# sourceMappingURL=mockData.js.map