"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
const react_1 = require("@remote-ui/react");
const mount_1 = require("./mount");
const render = (element) => {
    const wrapper = (0, mount_1.mount)((root) => (0, react_1.render)(element, root));
    /**
     * Adding an update method that flushes promises and then triggers an update via act. This is
     * needed when mocking APIs and other promise-based functions.
     */
    const update = () => __awaiter(void 0, void 0, void 0, function* () {
        yield new Promise((resolve) => setTimeout(resolve, 0));
        wrapper.act(() => null);
    });
    return {
        wrapper,
        update,
    };
};
exports.render = render;
//# sourceMappingURL=render.js.map