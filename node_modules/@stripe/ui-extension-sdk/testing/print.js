"use strict";
/*
Copyright 2020-present, Shopify Inc.
Copyright 2022-present, Stripe Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeChildToString = exports.nodeName = void 0;
const jest_matcher_utils_1 = require("jest-matcher-utils");
function nodeName(node) {
    var _a;
    return (_a = node.type) !== null && _a !== void 0 ? _a : '[RemoteRoot]';
}
exports.nodeName = nodeName;
function nodeChildToString(node, options = {}, level = 0) {
    if (typeof node === 'string')
        return node;
    // if this is an array node then print all children at the current level
    if (!node.type && node.children.length > 0) {
        return node.children
            .map((child) => nodeChildToString(child, options, level))
            .join('\n');
    }
    const name = nodeName(node);
    const indent = '  '.repeat(level);
    // TODO: This error cropped up with a recent TypeScript bump. Look into fixing.
    // @ts-ignore - "No overload matches this call."
    const props = Object.keys(node.props)
        .filter((key) => {
        if (options.all) {
            return true;
        }
        return !/^(className)$|^(aria|data)-/.test(key);
    })
        .reduce((list, key) => {
        if (!key) {
            return list;
        }
        const value = node.props[key];
        if (value === undefined && !options.all) {
            return list;
        }
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        list.push(toPropString(key, value, options.verbosity));
        return list;
    }, []);
    const hasChildren = node.children.length > 0;
    const open = `${indent}<${name}${props.length > 0 ? ` ${props.join(' ')}` : ''}${hasChildren ? '>' : ' />'}`;
    if (!hasChildren) {
        return open;
    }
    const close = `${indent}</${name}>`;
    if (options.depth != null && level >= options.depth) {
        return [
            open,
            `${indent}  {/* <${node.children.length} child${node.children.length === 1 ? '' : 'ren'}... /> */}`,
            close,
        ].join('\n');
    }
    return [
        open,
        ...node.children.map((child) => nodeChildToString(child, options, level + 1)),
        close,
    ].join('\n');
}
exports.nodeChildToString = nodeChildToString;
function toPropString(key, value, verbosity = 1) {
    if (value === undefined) {
        return `${key}={undefined}`;
    }
    if (value === null) {
        return `${key}={null}`;
    }
    if (typeof value === 'string') {
        return `${key}="${value}"`;
    }
    if (typeof value === 'boolean' && value) {
        return value ? `${key}` : `${key}={false}`;
    }
    if (value instanceof Array) {
        return `${key}={${(0, jest_matcher_utils_1.stringify)(value, verbosity + 1)}}`;
    }
    return `${key}={${(0, jest_matcher_utils_1.stringify)(value, verbosity)}}`;
}
//# sourceMappingURL=print.js.map