"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const httpClient_1 = require("./httpClient");
describe('StripeAppsHttpClient', () => {
    let mockFetch;
    let client;
    const defaultRequest = [
        'stripe.com',
        80,
        '/test',
        'GET',
        {},
        'hello!',
        'https',
        30,
    ];
    const defaultResponse = {
        json: {
            test: 'success',
        },
        arrayBuffer: new ArrayBuffer(1024),
        headers: {},
        ok: true,
        redirected: false,
        status: 200,
        statusText: '200 OK',
        type: 'application/json',
        url: '/test',
    };
    beforeEach(() => {
        mockFetch = jest.fn();
        client = new httpClient_1.StripeAppsHttpClient(mockFetch);
    });
    it('makeRequest makes a well-formed request', () => __awaiter(void 0, void 0, void 0, function* () {
        mockFetch.mockReturnValue(Promise.resolve(defaultResponse));
        const resp = yield client.makeRequest(...defaultRequest);
        expect(mockFetch).toHaveBeenCalled();
        expect(mockFetch).toHaveBeenCalledWith('/test', {
            method: 'GET',
            headers: {},
            body: 'hello!',
        });
        expect(yield resp.getStatusCode()).toEqual(defaultResponse.status);
        expect(yield resp.toJSON()).toEqual(defaultResponse.json);
    }));
    it('makeRequest rejects if the underlying request rejects', () => {
        mockFetch.mockReturnValue(
        // eslint-disable-next-line prefer-promise-reject-errors
        Promise.reject(Object.assign(Object.assign({}, defaultResponse), { status: 500, ok: false, json: {
                message: 'Something bad happened',
            } })));
        return expect(() => client.makeRequest(...defaultRequest)).rejects.toHaveProperty('status', 500);
    });
    it('Throws an error if you use a real API key', () => {
        expect(() => {
            return client.makeRequest('stripe.com', 80, '/test', 'GET', {
                Authorization: 'Bearer pk_test_51JSkf6FRwUQjTSJExXlf54UtutxxNcadPqWKFkE43NbDTlE771hfyUWTfACFAUoS36G9gv0BdUKofyO7WDYQUGt000LoZIuN2v',
            }, 'hello!', 'https', 30);
        }).rejects.toMatchInlineSnapshot(`
      [Error: Do not use actual stripe keys when using the Stripe JS API client with UI extesions.

       Instead, use \`STRIPE_API_KEY\` from \`@stripe/ui-extension-sdk/http_client\` as a placeholder.]
    `);
    });
    it('Exports placeholder API key', () => {
        expect(httpClient_1.STRIPE_API_KEY).toBe('DO_NOT_PASS_A_REAL_API_KEY');
    });
    it('toJSON rejects if the underlying response body is undefined', () => {
        mockFetch.mockReturnValue(Promise.resolve(Object.assign(Object.assign({}, defaultResponse), { json: undefined })));
        return expect(() => client
            .makeRequest(...defaultRequest)
            .then((response) => response.toJSON())).rejects.toThrow('Response body undefined');
    });
});
//# sourceMappingURL=httpClient.test.js.map